#!/bin/sh

. "../bin/libstd-ecm.sh"

usage() {
    echo "usage: $0 [-r repo] [-c cluster] [-v version | -b location ] [sbdh]
    -r    repository (k3s/rke2)
    -c    cluster type
    
    -v    k3s/rke2 version to use
    OR
    -b    location of local k3s/rke2 binary to use

    -k    kill cluster
    -d    kill cluster and delete files
    -s    skip Vagrantfile download
    -o    only download Vagrantfile, don't create cluster
    -h    show help

cluster types:
    - basic:        2 VMs, 1 server, 1 agent
    - basic-lite:   1 VM,  1 server
    - ha:           5 VMs, 3 servers, 2 agents
    - ha-lite:      3 VMs, 3 servers
    - split:        7 VMs, 3 etcd-only server, 2 cp-only servers, 2 agents. Taints on etcd and control-plane
    - split-lite:   3 VMs, 1 etcd-only server, 1 cp-only servers, 1 agent. Taints on etcd and control-plane
    - rancher:      4 VMs, 1 single server with rancher, 3 blank VMs ready for provisioning
examples:
    $0 -r k3s -v v1.22.9+k3s1 -c basic 
    $0 -r k3s -v v1.23.5+k3s1 -c ha
    $0 -r k3s -c ha-lite -b ../../k3s/dist/artifacts/k3s
    
    $0 -d -c ha
    "
}

# TODO - dual-stack:   3 VMs, 3 servers with IPv4 and IPv6

install_binary() {
    if [ "$BINARY_LOCATION" ]; then
        cp "$BINARY_LOCATION" ./
    elif [ ! -f ./"$BINARY" ]; then 
        wget https://github.com/"$ORG_REPO"/releases/download/"$VERSION"/"$BINARY"
        chmod +x ./"$BINARY"
    fi
}

deploy_binary() {
    install_binary
    NODE_ROLES=$1
    for node in $NODE_ROLES; do
        echo "scp $BINARY to $node"
        vagrant scp ./k3s "$node":/tmp/
        vagrant ssh "$node" -c "sudo mv /tmp/k3s /usr/local/bin/" 2> /dev/null
    done
}

check_and_install_plugins() {
    plugins=$(vagrant plugin list --local)
    if [ $(echo "$plugins" | grep -c "vagrant-libvirt") -eq 0 ]; then
        vagrant plugin install vagrant-libvirt --plugin-verison 0.8.2
    fi
    if [ $(echo "$plugins" | grep -c "vagrant-k3s") -eq 0 ]; then
        vagrant plugin install vagrant-k3s
    fi
    if [ $(echo "$plugins" | grep -c "vagrant-rke2") -eq 0 ]; then
        vagrant plugin install vagrant-rke2
    fi
    if [ $( echo "$plugins" | grep -c "vagrant-reload") -eq 0 ]; then
        vagrant plugin install vagrant-reload
    fi
}

get_possible_node_roles() {
    case $CLUSTER in
    split|split-lite)
        NODE_ROLES="server-etcd-0 server-etcd-1 server-etcd-2 server-cp-0 server-cp-1 agent-0 agent-1"
    ;;
    *)
        NODE_ROLES="server-0 server-1 server-2 agent-0 agent-1 agent-2"
    ;;
    esac
}

node_list() {
    node_names=$(vagrant global-status | awk '/---/,/^ $/' | awk  '{printf "%s ", $2} END {print}')
    for node in $node_names; do
        ip=$(vagrant ssh $node -c "ip addr show dev eth1 | awk '/inet / {print \$2}'" 2> /dev/null)
        printf "%-15s %s\n" $node $ip
    done
}

while getopts 'r:c:v:b:kdohs' c; do
    case $c in
    r) 
        ORG_REPO=$OPTARG
    ;;
    c) 
        CLUSTER=$OPTARG
    ;;
    v) 
        VERSION=$OPTARG
    ;;
    b)
        BINARY_LOCATION=$OPTARG
    ;;
    k)
        KILL=true
    ;;
    d)
        DESTROY=true
    ;;
    s)
        SKIP_DOWNLOAD=true
    ;;
    o)
        ONLY_DOWNLOAD=true
    ;;
    h)
        usage
        exit 0
    ;;
    *)
        usage
        exit 1
    ;;
    esac
done

has_vagrant
has_curl

if [ -z "${CLUSTER}" ]; then
    if [ -f "cluster" ]; then
        CLUSTER=$(cat cluster)
    else
        echo "error: cluster type (-c) required"
        exit 1
    fi
else
    echo "$CLUSTER" > cluster
fi

if [ "$KILL" = "true" ]; then
    get_possible_node_roles
    E2E_NODE_ROLES="$NODE_ROLES" vagrant destroy -f
    exit 0
fi
if [ "$DESTROY" = "true" ]; then
    get_possible_node_roles
    E2E_NODE_ROLES="$NODE_ROLES" vagrant destroy -f
    rm -rf scripts .vagrant Vagrantfile vagrantdefaults.rb k3s rke2 cluster
    exit 0
fi

if [ -z "${ORG_REPO}" ]; then
    echo "error: repo (-r) required"
    exit 1
fi

if [ -z "${VERSION}" ] && [ -z "${BINARY_LOCATION}" ]; then
    echo "error: version (-v) or binary (-b) required"
    exit 1
fi

BINARY="k3s"
if [ "$ORG_REPO" = "k3s" ]; then 
    ORG_REPO="k3s-io/k3s"
elif [ "$ORG_REPO" = "rke2" ]; then
    ORG_REPO="rancher/rke2"
    BINARY="rke2"
else 
   echo "error: unknown repo" 
   exit 1
fi

if [ -z "$SKIP_DOWNLOAD" ] && [ -f "Vagrantfile" ]; then
    echo "existing cluster found; delete it first"
    exit 1
fi


# Download and setup appropiate vagrant files and binary
if [ -z "$SKIP_DOWNLOAD" ]; then
    case $CLUSTER in
    basic | basic-lite | ha | ha-lite )
        # wget https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/validatecluster/Vagrantfile
        wget -q https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/validatecluster/Vagrantfile
        curl --create-dirs -q https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/scripts/latest_commit.sh -o ./scripts/latest_commit.sh
        # wget -q https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/vagrantdefaults.rb
        wget -q https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/vagrantdefaults.rb
    ;;
    split | split-lite)
        # wget https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/splitserver/Vagrantfile
        # curl --create-dirs -q https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/scripts/latest_commit.sh -o ./scripts/latest_commit.sh
        # wget -q https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/vagrantdefaults.rb
        wget https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/splitserver/Vagrantfile
        curl --create-dirs -q https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/scripts/latest_commit.sh -o ./scripts/latest_commit.sh
        wget -q https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/vagrantdefaults.rb
        check_and_install_plugins
    ;;
    rancher)
        # wget https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/validatecluster/Vagrantfile
        # curl --create-dirs -q https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/scripts/rancher.sh -o ./scripts/rancher.sh
        # wget -q https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/vagrantdefaults.rb
        wget https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/validatecluster/Vagrantfile
        curl --create-dirs -q https://raw.githubusercontent.com/"$ORG_REPO"/master/tests/e2e/scripts/latest_commit.sh -o ./scripts/latest_commit.sh
        curl --create-dirs -q https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/scripts/rancher.sh -o ./scripts/rancher.sh
        wget -q https://raw.githubusercontent.com/dereknola/k3s/rancher_split/tests/e2e/vagrantdefaults.rb
    ;;
    esac
    
    # Replace default roles
    get_possible_node_roles
    sed -i "3s/.*/  %w[$NODE_ROLES])/" Vagrantfile
    # Remove the top line of the vagrantfile to enable parallel execution.
    tail -n +2 Vagrantfile > Vagrantfile.tmp && mv Vagrantfile.tmp Vagrantfile
    
    check_and_install_plugins

    if [ "$ONLY_DOWNLOAD" = "true" ]; then
        install_binary
        exit 0
    fi
fi


# We replace the default OS with alpine-3.15 for fast download and startup time
OS="generic/alpine315"
# We can also use ubuntu (the most common OS deployment for RKE2/K3s).
# It is much larger (~1.8GB) and takes longer to deploy.
# OS="generic/ubuntu2004"
case $CLUSTER in

basic)
    NODE_ROLES="server-0 agent-0"
    E2E_NODE_BOXES="$OS $OS" vagrant up --no-provision
    deploy_binary "$NODE_ROLES"

    E2E_EXTERNAL_DB=none E2E_NODE_ROLES=$NODE_ROLES E2E_NODE_BOXES="$OS $OS" vagrant provision
;;
basic-lite)
    NODE_ROLES="server-0"
    E2E_EXTERNAL_DB=none E2E_NODE_ROLES=$NODE_ROLES E2E_NODE_BOXES="$OS" vagrant up
;;
ha)
    NODE_ROLES="server-0 server-1 server-2 agent-0 agent-1"
    E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES="$OS $OS $OS $OS $OS" vagrant up --no-provision
    deploy_binary "$NODE_ROLES"
    
    echo "bringing up first node"
    E2E_RELEASE_VERSION=skip E2E_NODE_BOXES="$OS $OS $OS $OS $OS" E2E_NODE_ROLES=$NODE_ROLES vagrant provision server-0
    
    for node in $NODE_ROLES; do
        if [ "$node" = "server-0" ]; then continue; fi
        E2E_RELEASE_VERSION=skip E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES="$OS $OS $OS $OS $OS" vagrant provision "$node" &
    done
    wait   
;;
ha-lite)
    NODE_ROLES="server-0 server-1 server-2"
    E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES="$OS $OS $OS" vagrant up --no-provision
    deploy_binary "$NODE_ROLES"
    
    echo "bringing up first node"
    E2E_RELEASE_VERSION=skip E2E_NODE_ROLES=$NODE_ROLES E2E_NODE_BOXES="$OS $OS $OS" vagrant provision server-0

    for node in $NODE_ROLES; do
        if [ "$node" = "server-0" ]; then continue; fi
        E2E_RELEASE_VERSION=skip E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES="$OS $OS $OS" vagrant provision "$node" &
    done
    wait  
;;
split)
    NODE_ROLES="server-etcd-0 server-etcd-1 server-etcd-2 server-cp-0 server-cp-1 agent-0 agent-1"
    OS_NUM="$OS $OS $OS $OS $OS $OS $OS $OS"
    E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES=$OS_NUM vagrant up --no-provision
    deploy_binary "$NODE_ROLES"
    
    echo "bringing up first node"
    E2E_RELEASE_VERSION=skip E2E_NODE_ROLES=$NODE_ROLES E2E_NODE_BOXES=$OS_NUM vagrant provision server-etcd-0
    
    for node in $NODE_ROLES; do
        if [ "$node" = "server-etcd-0" ]; then continue; fi
        E2E_RELEASE_VERSION=skip E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES=$OS_NUM vagrant provision "$node" &
    done
    wait
;;
split-lite)
    NODE_ROLES="server-etcd-0 server-cp-0 agent-0"
    E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES="$OS $OS $OS" vagrant up --no-provision
    deploy_binary "$NODE_ROLES"
    
    echo "bringing up first node"
    E2E_RELEASE_VERSION=skip E2E_NODE_ROLES=$NODE_ROLES E2E_NODE_BOXES="$OS $OS $OS" vagrant provision server-etcd-0
    
    for node in $NODE_ROLES; do
        if [ "$node" = "server-etcd-0" ]; then continue; fi
        E2E_RELEASE_VERSION=skip E2E_NODE_ROLES="$NODE_ROLES" E2E_NODE_BOXES="$OS $OS $OS" vagrant provision "$node" &
    done
    wait
;;
rancher) 
    NODE_ROLES="server-0 agent-0 agent-1 agent-2"
    E2E_RELEASE_VERSION="$VERSION" E2E_NODE_CPUS=3 E2E_NODE_MEMORY=3072 E2E_EXTERNAL_DB=none E2E_NODE_BOXES="$OS" vagrant up server-0
    E2E_RANCHER=true vagrant provision server-0 --provision-with "Install Rancher"
    E2E_NODE_ROLES="agent-0 agent-1 agent-2" E2E_NODE_BOXES="$OS $OS $OS" vagrant up --no-provision
    CMD="echo -n Rancher URL: https://10.10.10.100.nip.io/dashboard/?setup=;kubectl get secret --namespace cattle-system bootstrap-secret -o go-template='{{.data.bootstrapPassword|base64decode}}'; echo "
    vagrant ssh server-0 -c "$CMD" 2> /dev/null
;;
esac

echo "VMs and cluster up, active nodes:"
printf "  %s\n" $NODE_ROLES